# perl highlighting

LIBC       = shared
#LIBC       = static
#OUT        = Release
#MAPFILES   = 1
CONSOLE    = 1
OPTIMIZE   = size

#PDB        = 1

OLDCRT     = 0

!if "$PLATFORM" ne "win32"
	# linux/cygwin + GCC
	STDLIBS   = stdc++ GL
	!if "$PLATFORM" ne "cygwin"
		STDLIBS += dl	# dlopen() and friends
	!endif
!endif

!if "$COMPILER" eq "VisualC"
	!if "$OLDCRT" eq "1"
		OPTIONS += {
			-GS-	# disable security checks
		}
		WDKCRT = "c:/!msvcrt"
		LINKFLAGS = {
			-nodefaultlib:libcmt.lib -nodefaultlib:msvcprt.lib
			-manifest:no
			$WDKCRT/lib/Win32/msvcrt.lib
			$WDKCRT/lib/Win32/wdk_msvcrt_win2000.obj	# required - has different mainCRTStartup
#			$WDKCRT/lib/Win32/wdk_oldnames.lib		# not required
		}
		# GPF when starting exe linked with "oldnames.lib" (not "wdk_oldnames.lib") -- incorrect call of stricmp()
		# (generated "call dword ptr ds:[400000]" instead of "call ds:__imp___stricmp")
		#?? needs to specify path to WDK CRT files (add "OLDCRT" option?)
		#?? Also note: makefiles with WDKCRT dependency will not be compatible with standard VC installations
		#?? Can try to add wdk_msvcrt_win2000.obj and oldnames.lib into msvcrt.lib
		#?? Has a lot of kernel32.dll function calls from __security_init_cookie() - this function is called from mainCRTStartup()
		#?? and cannot be overrided (unless use own version of this function) -- check "VC9/crt/src/crtexe.c"
	!endif
!endif

!if "$COMPILER" eq "GnuC"
	LIBC      = shared
	OPTIONS   =  -fno-strict-aliasing	# required for our uint_cast()-based FP hacks
	OPTIONS   += -fno-stack-protector	# this will remove GLIBC_2.4 dependency
	OPTIONS   += {
		# disable some warnings
		-Wno-invalid-offsetof		#?? this flag is for C++ only, not for C
	}
!endif


LIBRARIES  = $R/libs $R/libs/xbox
OBJDIR     = $R/obj/$PRJ-$PLATFORM
STDLIBS   += SDL SDLmain

INCLUDES += . $R/Core $R/Unreal $R/libs/include
!if "$PLATFORM" eq "win32"
	INCLUDES += $R/libs/includewin32
!endif

# smaller zlib
DEFINES =			\
	DYNAMIC_CRC_TABLE	\
	BUILDFIXED


# libraries
DDS_LIBS = {
	# ... dds decompression
	$R/libs/ddslib.c
}


NV_LIBS = {
	$R/libs/nvtt/nvcore/*.cpp
	$R/libs/nvtt/nvimage/*.cpp
#	$R/libs/nvtt/nvmath/*.cpp
}
INCLUDES += $R/libs/nvtt


UE3_LIBS = {
	# ... lzo for compressed UE3 packages
	$R/libs/lzo/lzo_init.c
	$R/libs/lzo/lzo1x_d2.c
	# ... zlib for compressed UE3 packages
	$R/libs/zlib/*.c
	# ... lzx for compresses XBox360 UE3 packages
	$R/libs/mspack/lzxd.c
}
