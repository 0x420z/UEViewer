// Autogenerated file: do not modify

#if _WIN32
#	define NUM_GLFUNCS	49
#	define NUM_EXTFUNCS	16
#	define NUM_EXTENSIONS	1
#elif __linux__
#	define NUM_GLFUNCS	49
#	define NUM_EXTFUNCS	16
#	define NUM_EXTENSIONS	1
#else
#	define NUM_GLFUNCS	49
#	define NUM_EXTFUNCS	16
#	define NUM_EXTENSIONS	1
#endif


static const char *GLNames[NUM_GLFUNCS + NUM_EXTFUNCS] = {
	"glAlphaFunc",
	"glBegin",
	"glBindTexture",
	"glBlendFunc",
	"glClear",
	"glClearColor",
	"glColor3f",
	"glColor3fv",
	"glColor4f",
	"glColorPointer",
	"glCullFace",
	"glDeleteTextures",
	"glDepthFunc",
	"glDepthMask",
	"glDepthRange",
	"glDisable",
	"glDisableClientState",
	"glDrawElements",
	"glEnable",
	"glEnableClientState",
	"glEnd",
	"glGetError",
	"glGetString",
	"glIsTexture",
	"glLightModeli",
	"glLightfv",
	"glLineWidth",
	"glLoadIdentity",
	"glLoadMatrixf",
	"glMaterialf",
	"glMaterialfv",
	"glMatrixMode",
	"glNormal3fv",
	"glNormalPointer",
	"glOrtho",
	"glPolygonMode",
	"glReadPixels",
	"glRotatef",
	"glScissor",
	"glShadeModel",
	"glTexCoord2f",
	"glTexCoordPointer",
	"glTexImage2D",
	"glTexParameteri",
	"glVertex2f",
	"glVertex3f",
	"glVertex3fv",
	"glVertexPointer",
	"glViewport"
#if _WIN32


#endif

,
	"glAttachShader",
	"glCompileShader",
	"glCreateProgram",
	"glCreateShader",
	"glDeleteProgram",
	"glDeleteShader",
	"glDetachShader",
	"glGetProgramiv",
	"glGetProgramInfoLog",
	"glGetShaderiv",
	"glGetShaderInfoLog",
	"glGetUniformLocation",
	"glLinkProgram",
	"glShaderSource",
	"glUseProgram",
	"glUniform1i"
#if _WIN32


#elif __linux__

#endif


};

#if !NO_GL_LOG


static const char *EnumName(GLenum v)
{
	switch (v)
	{
	default:
		return va("UNK_%X", v);
	}
}


static void APIENTRY logAlphaFunc(GLenum func, GLclampf ref)
{
	printf("%s (GL_%s, %g)\n", "glAlphaFunc", EnumName(func), ref);
	lib.AlphaFunc(func, ref);
}

static void APIENTRY logBegin(GLenum mode)
{
	printf("%s (GL_%s)\n", "glBegin", EnumName(mode));
	lib.Begin(mode);
}

static void APIENTRY logBindTexture(GLenum target, GLuint texture)
{
	printf("%s (GL_%s, %d)\n", "glBindTexture", EnumName(target), texture);
	lib.BindTexture(target, texture);
}

static void APIENTRY logBlendFunc(GLenum sfactor, GLenum dfactor)
{
	printf("%s (GL_%s, GL_%s)\n", "glBlendFunc", EnumName(sfactor), EnumName(dfactor));
	lib.BlendFunc(sfactor, dfactor);
}

static void APIENTRY logClear(GLbitfield mask)
{
	printf("%s\n", "glClear");
	lib.Clear(mask);
}

static void APIENTRY logClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
	printf("%s (%g, %g, %g, %g)\n", "glClearColor", red, green, blue, alpha);
	lib.ClearColor(red, green, blue, alpha);
}

static void APIENTRY logColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
	printf("%s (%g, %g, %g)\n", "glColor3f", red, green, blue);
	lib.Color3f(red, green, blue);
}

static void APIENTRY logColor3fv(const GLfloat *v)
{
	printf("%s\n", "glColor3fv");
	lib.Color3fv(v);
}

static void APIENTRY logColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
	printf("%s (%g, %g, %g, %g)\n", "glColor4f", red, green, blue, alpha);
	lib.Color4f(red, green, blue, alpha);
}

static void APIENTRY logColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
	printf("%s (%d, GL_%s, %d, $%X)\n", "glColorPointer", size, EnumName(type), stride, (unsigned)pointer);
	lib.ColorPointer(size, type, stride, pointer);
}

static void APIENTRY logCullFace(GLenum mode)
{
	printf("%s (GL_%s)\n", "glCullFace", EnumName(mode));
	lib.CullFace(mode);
}

static void APIENTRY logDeleteTextures(GLsizei n, const GLuint *textures)
{
	printf("%s (%d, $%X)\n", "glDeleteTextures", n, (unsigned)textures);
	lib.DeleteTextures(n, textures);
}

static void APIENTRY logDepthFunc(GLenum func)
{
	printf("%s (GL_%s)\n", "glDepthFunc", EnumName(func));
	lib.DepthFunc(func);
}

static void APIENTRY logDepthMask(GLboolean flag)
{
	printf("%s (%d)\n", "glDepthMask", flag);
	lib.DepthMask(flag);
}

static void APIENTRY logDepthRange(GLclampd zNear, GLclampd zFar)
{
	printf("%s (%g, %g)\n", "glDepthRange", zNear, zFar);
	lib.DepthRange(zNear, zFar);
}

static void APIENTRY logDisable(GLenum cap)
{
	printf("%s (GL_%s)\n", "glDisable", EnumName(cap));
	lib.Disable(cap);
}

static void APIENTRY logDisableClientState(GLenum array)
{
	printf("%s (GL_%s)\n", "glDisableClientState", EnumName(array));
	lib.DisableClientState(array);
}

static void APIENTRY logDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
	printf("%s (GL_%s, %d, GL_%s, $%X)\n", "glDrawElements", EnumName(mode), count, EnumName(type), (unsigned)indices);
	lib.DrawElements(mode, count, type, indices);
}

static void APIENTRY logEnable(GLenum cap)
{
	printf("%s (GL_%s)\n", "glEnable", EnumName(cap));
	lib.Enable(cap);
}

static void APIENTRY logEnableClientState(GLenum array)
{
	printf("%s (GL_%s)\n", "glEnableClientState", EnumName(array));
	lib.EnableClientState(array);
}

static void APIENTRY logEnd()
{
	printf("%s\n", "glEnd");
	lib.End();
}

static GLenum APIENTRY logGetError()
{
	return lib.GetError();
}

static const GLubyte * APIENTRY logGetString(GLenum name)
{
	printf("%s\n", "glGetString");
	return lib.GetString(name);
}

static GLboolean APIENTRY logIsTexture(GLuint texture)
{
	printf("%s\n", "glIsTexture");
	return lib.IsTexture(texture);
}

static void APIENTRY logLightModeli(GLenum pname, GLint param)
{
	printf("%s\n", "glLightModeli");
	lib.LightModeli(pname, param);
}

static void APIENTRY logLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
	printf("%s\n", "glLightfv");
	lib.Lightfv(light, pname, params);
}

static void APIENTRY logLineWidth(GLfloat width)
{
	printf("%s\n", "glLineWidth");
	lib.LineWidth(width);
}

static void APIENTRY logLoadIdentity()
{
	printf("%s\n", "glLoadIdentity");
	lib.LoadIdentity();
}

static void APIENTRY logLoadMatrixf(const GLfloat *m)
{
	printf("%s\n", "glLoadMatrixf");
	lib.LoadMatrixf(m);
}

static void APIENTRY logMaterialf(GLenum face, GLenum pname, GLfloat param)
{
	printf("%s\n", "glMaterialf");
	lib.Materialf(face, pname, param);
}

static void APIENTRY logMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
	printf("%s\n", "glMaterialfv");
	lib.Materialfv(face, pname, params);
}

static void APIENTRY logMatrixMode(GLenum mode)
{
	printf("%s (GL_%s)\n", "glMatrixMode", EnumName(mode));
	lib.MatrixMode(mode);
}

static void APIENTRY logNormal3fv(const GLfloat *v)
{
	printf("%s\n", "glNormal3fv");
	lib.Normal3fv(v);
}

static void APIENTRY logNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
	printf("%s\n", "glNormalPointer");
	lib.NormalPointer(type, stride, pointer);
}

static void APIENTRY logOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
	printf("%s (%g, %g, %g, %g, %g, %g)\n", "glOrtho", left, right, bottom, top, zNear, zFar);
	lib.Ortho(left, right, bottom, top, zNear, zFar);
}

static void APIENTRY logPolygonMode(GLenum face, GLenum mode)
{
	printf("%s (GL_%s, GL_%s)\n", "glPolygonMode", EnumName(face), EnumName(mode));
	lib.PolygonMode(face, mode);
}

static void APIENTRY logReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
	printf("%s (%d, %d, %d, %d, GL_%s, GL_%s, $%X)\n", "glReadPixels", x, y, width, height, EnumName(format), EnumName(type), (unsigned)pixels);
	lib.ReadPixels(x, y, width, height, format, type, pixels);
}

static void APIENTRY logRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
	printf("%s (%g, %g, %g, %g)\n", "glRotatef", angle, x, y, z);
	lib.Rotatef(angle, x, y, z);
}

static void APIENTRY logScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
	printf("%s (%d, %d, %d, %d)\n", "glScissor", x, y, width, height);
	lib.Scissor(x, y, width, height);
}

static void APIENTRY logShadeModel(GLenum mode)
{
	printf("%s (GL_%s)\n", "glShadeModel", EnumName(mode));
	lib.ShadeModel(mode);
}

static void APIENTRY logTexCoord2f(GLfloat s, GLfloat t)
{
	printf("%s (%g, %g)\n", "glTexCoord2f", s, t);
	lib.TexCoord2f(s, t);
}

static void APIENTRY logTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
	printf("%s (%d, GL_%s, %d, $%X)\n", "glTexCoordPointer", size, EnumName(type), stride, (unsigned)pointer);
	lib.TexCoordPointer(size, type, stride, pointer);
}

static void APIENTRY logTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
	printf("%s (GL_%s, %d, GL_%s, %d, %d, %d, GL_%s, GL_%s, $%X)\n", "glTexImage2D", EnumName(target), level, EnumName(internalformat), width, height, border, EnumName(format), EnumName(type), (unsigned)pixels);
	lib.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}

static void APIENTRY logTexParameteri(GLenum target, GLenum pname, GLint param)
{
	printf("%s (GL_%s, GL_%s, %d)\n", "glTexParameteri", EnumName(target), EnumName(pname), param);
	lib.TexParameteri(target, pname, param);
}

static void APIENTRY logVertex2f(GLfloat x, GLfloat y)
{
	printf("%s (%g, %g)\n", "glVertex2f", x, y);
	lib.Vertex2f(x, y);
}

static void APIENTRY logVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
	printf("%s (%g, %g, %g)\n", "glVertex3f", x, y, z);
	lib.Vertex3f(x, y, z);
}

static void APIENTRY logVertex3fv(const GLfloat *v)
{
	printf("%s\n", "glVertex3fv");
	lib.Vertex3fv(v);
}

static void APIENTRY logVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
	printf("%s (%d, GL_%s, %d, $%X)\n", "glVertexPointer", size, EnumName(type), stride, (unsigned)pointer);
	lib.VertexPointer(size, type, stride, pointer);
}

static void APIENTRY logViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
	printf("%s (%d, %d, %d, %d)\n", "glViewport", x, y, width, height);
	lib.Viewport(x, y, width, height);
}


#if _WIN32


#endif

static void APIENTRY logAttachShader(GLuint, GLuint)
{
	printf("%s\n", "glAttachShader");
	lib.AttachShader(, );
}

static void APIENTRY logCompileShader(GLuint)
{
	printf("%s\n", "glCompileShader");
	lib.CompileShader();
}

static GLuint APIENTRY logCreateProgram(void)
{
	printf("%s\n", "glCreateProgram");
	return lib.CreateProgram();
}

static GLuint APIENTRY logCreateShader(GLenum)
{
	printf("%s\n", "glCreateShader");
	return lib.CreateShader();
}

static void APIENTRY logDeleteProgram(GLuint)
{
	printf("%s\n", "glDeleteProgram");
	lib.DeleteProgram();
}

static void APIENTRY logDeleteShader(GLuint)
{
	printf("%s\n", "glDeleteShader");
	lib.DeleteShader();
}

static void APIENTRY logDetachShader(GLuint, GLuint)
{
	printf("%s\n", "glDetachShader");
	lib.DetachShader(, );
}

static void APIENTRY logGetProgramiv(GLuint, GLenum, GLint *)
{
	printf("%s\n", "glGetProgramiv");
	lib.GetProgramiv(, , );
}

static void APIENTRY logGetProgramInfoLog(GLuint, GLsizei, GLsizei *, GLchar *)
{
	printf("%s\n", "glGetProgramInfoLog");
	lib.GetProgramInfoLog(, , , );
}

static void APIENTRY logGetShaderiv(GLuint, GLenum, GLint *)
{
	printf("%s\n", "glGetShaderiv");
	lib.GetShaderiv(, , );
}

static void APIENTRY logGetShaderInfoLog(GLuint, GLsizei, GLsizei *, GLchar *)
{
	printf("%s\n", "glGetShaderInfoLog");
	lib.GetShaderInfoLog(, , , );
}

static GLint APIENTRY logGetUniformLocation(GLuint, const GLchar *)
{
	printf("%s\n", "glGetUniformLocation");
	return lib.GetUniformLocation(, GLchar);
}

static void APIENTRY logLinkProgram(GLuint)
{
	printf("%s\n", "glLinkProgram");
	lib.LinkProgram();
}

static void APIENTRY logShaderSource(GLuint, GLsizei, const GLchar* *, const GLint *)
{
	printf("%s\n", "glShaderSource");
	lib.ShaderSource(, , GLchar, GLint);
}

static void APIENTRY logUseProgram(GLuint)
{
	printf("%s\n", "glUseProgram");
	lib.UseProgram();
}

static void APIENTRY logUniform1i(GLint, GLint)
{
	printf("%s\n", "glUniform1i");
	lib.Uniform1i(, );
}


#if _WIN32


#elif __linux__

#endif

static const GL_t logFuncs = {
	logAlphaFunc,
	logBegin,
	logBindTexture,
	logBlendFunc,
	logClear,
	logClearColor,
	logColor3f,
	logColor3fv,
	logColor4f,
	logColorPointer,
	logCullFace,
	logDeleteTextures,
	logDepthFunc,
	logDepthMask,
	logDepthRange,
	logDisable,
	logDisableClientState,
	logDrawElements,
	logEnable,
	logEnableClientState,
	logEnd,
	logGetError,
	logGetString,
	logIsTexture,
	logLightModeli,
	logLightfv,
	logLineWidth,
	logLoadIdentity,
	logLoadMatrixf,
	logMaterialf,
	logMaterialfv,
	logMatrixMode,
	logNormal3fv,
	logNormalPointer,
	logOrtho,
	logPolygonMode,
	logReadPixels,
	logRotatef,
	logScissor,
	logShadeModel,
	logTexCoord2f,
	logTexCoordPointer,
	logTexImage2D,
	logTexParameteri,
	logVertex2f,
	logVertex3f,
	logVertex3fv,
	logVertexPointer,
	logViewport
#if _WIN32


#endif

,
	logAttachShader,
	logCompileShader,
	logCreateProgram,
	logCreateShader,
	logDeleteProgram,
	logDeleteShader,
	logDetachShader,
	logGetProgramiv,
	logGetProgramInfoLog,
	logGetShaderiv,
	logGetShaderInfoLog,
	logGetUniformLocation,
	logLinkProgram,
	logShaderSource,
	logUseProgram,
	logUniform1i
#if _WIN32


#elif __linux__

#endif


};

#endif // NO_GL_LOG

struct extInfo_t {
	const char *names;				// "alias1\0alias2\0...\0" or "name\0\0"
	const char *name;				// current name (points to a primary name or to any alias)
	const char *cvar;				// name of cvar to disable extension
	short	first, count;			// positions of provided functions in name table
	unsigned require, deprecate;	// dependent extensions
};

#if NUM_EXTENSIONS

static extInfo_t extInfo[NUM_EXTENSIONS] = {
	{"2.0\0", NULL, NULL, NUM_GLFUNCS+0, 16, 0, 0}
#if _WIN32


#elif __linux__

#endif

};

#endif // NUM_EXTENSIONS
