! use my GL_Bind tool to dynamically link to OpenGL (allows extension loading)

! options for:
  - option to toggle lighting
  ? option to toggle texturing
! packages have tree-like structure of objects, should use whole tree to map export->import (use
  package's "package" field recursively; note: depth can be any)
  * load proper package
  - use object with the same path (problem: how to pass object path to search?)
- change alternative skin (?)

! UObject:
  - EndLoad():
    1) sort by package/offset; priority for CURRENT package
    2) add assert before serialization: should not be already loaded (bool flag for UObject)
  - add 2 global lists: complete objects and objects, required serialization; use
    bool flag to check, which list holds object
  ? can enumerate properties using FindProperty() function: add argument 'enumerator', which will
    be used for each property; if function return 'false' - stop iterating. Field searching may be
    easily implemented using this tech.

? X-axis (red) should look at viewer; now - looking forward (should negate X axis)


- try to compile with MinGW and for Linux
- move new Math3D parts to Quake2 core


REST TO IMPLEMENT:
~~~~~~~~~~~~~~~~~~
- VertexMesh:
  - tweening
  ? LOD support
- SkeletalMesh:
  - compute normals for base mesh
    + lighting
  - correctly display LOD models
  - hardware skinning


EXTRA KEYS:
~~~~~~~~~~~
- show boxes
- show bone names


NOTES:
~~~~~~
- check XGame/Classes/SpeciesType.uc + Species_*.uc -- setting many properties for
  player model
- system/*.upl: files, containing links between meshes/skins/voices/names/portraits etc
  http://wiki.beyondunreal.com/wiki/UPL_File
- 2K4_NvidiaIntro has animation+model to be the same names, different types only
  * used from MOV-UT2004-Intro.ut2
- q2 model axis: forward/left/up (?); q2 world axis: forward/right/up (?); ut model axis
  is right/forward/up


COMPLEX MATERIALS:
~~~~~~~~~~~~~~~~~~
- AW-2k4XP.Weapons.ShockShieldFinal
                   ShockShieldShaftFallbackFinal
- AW-ShieldShaders.Shaders.BlueShieldFinal - has nested Combiners
- DeRez.Shaders.DeRezFinalHead
- EpicParticles.Shaders.FireFinal
- InterfaceContent.Logos.fbSymbolShader (UT menu logo)
                   HUD.fbBombFocus
                   SPMenu.SP_FinalButton (has combiner with const color)
- MenuEffects.ScoreBoard.ScoreboardU_FB (alternative UT logo)
- PickupSkins.Shaders.FinalHealthCore
                      FinalDamShader
- UT2004Weapons.Shaders.BlueShockFinal
                        PurpleShockFinal (complex, nested Combiners)
                        LinkGunYellowShader
                        PowerPulseShaderYellow
- WarEffectsTextures.Particles.N_energy01_S_JM (Shader uses FinalBlend; simple)
- XEffectMat.goop.GoopFB (has Shader -> Modifier -> Combiner)
- XGameTextures.SuperPickups.DOMMabRs
                             DOMScreens
                             HealthPackTexS

SIMPLE MODIFIERS:
~~~~~~~~~~~~~~~~~
- check HUDContent package
- PickupSkins.Shaders.ShieldFinal
- ULogo.MainMenu.CornerMenuFinal (UT menu slideshow)
- UT2004Weapons.Shaders.ShockHitShader
                WeaponSpecMap2 (used as specular overlay for rocket launcher)
- VMVehicle-TX.VehicleExplosions.GENERICshrapnelTEX
               Environments.ReflectionEnv (envmap using single texture)
- WeaponSkins.Skins.SniperScreen1C

Notes:
- it is possible, that Shader will have same object in Diffuse and SelfIllumination fields -
  - can ignore Diffuse here? (really, such shaders require SelfIllumination only, but UE
  requires non-null Diffuse, otherwise 'white' will be displayed)


COMMON MATERIAL USE TREE:
~~~~~~~~~~~~~~~~~~~~~~~~~
FinalBlend
  -> Shader
     -> Combiner(s)
       -> Modifier (any count)
         -> Texture
         -> Modifier (const color)
